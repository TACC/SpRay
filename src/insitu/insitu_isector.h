// ========================================================================== //
// Copyright (c) 2017-2018 The University of Texas at Austin.                 //
// All rights reserved.                                                       //
//                                                                            //
// Licensed under the Apache License, Version 2.0 (the "License");            //
// you may not use this file except in compliance with the License.           //
// A copy of the License is included with this software in the file LICENSE.  //
// If your copy does not contain the License, you may obtain a copy of the    //
// License at:                                                                //
//                                                                            //
//     https://www.apache.org/licenses/LICENSE-2.0                            //
//                                                                            //
// Unless required by applicable law or agreed to in writing, software        //
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  //
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.           //
// See the License for the specific language governing permissions and        //
// limitations under the License.                                             //
//                                                                            //
// ========================================================================== //

#pragma once

#include <queue>

#include "glm/glm.hpp"
#include "glog/logging.h"

#include "cmake_config.h"  // auto generated by cmake

#include "insitu/insitu_ray.h"
#include "render/qvector.h"
#include "render/scene.h"

namespace spray {
namespace insitu {

template <typename SceneT>
class Isector {
 public:
  void init(std::size_t num_domains) { domains_.resize(num_domains); }

 public:
  // used for parallel ray queuing
  void intersect(const SceneT* scene, Ray* ray, spray::QVector<Ray*>* qs) {
    isectAll(scene, ray, qs);
  }
  // #ifdef SPRAY_GLOG_CHECK
  //     CHECK_GT(domains_.size(), 0);
  // #endif
  //     domains_.reset();
  //     // RTCRayUtil::makeRayForDomainIntersection(ray->org, ray->dir,
  //     &domains_,
  //     //                                          &eray_);
  //     eray_.reset(ray->org, ray->dir, &domains_);
  //
  //     // ray-domain intersection tests
  //     scene->intersectDomains(eray_);
  //
  //     // place ray in hit domains
  //     if (domains_.count) {
  //       // sort hit domains
  //       RTCRayUtil::sortDomains(domains_, hits_);
  //
  //       // place the ray (
  //       for (int d = 0; d < domains_.count; ++d) {
  //         int id = hits_[d].id;
  // #ifdef SPRAY_GLOG_CHECK
  //         CHECK_LT(id, ndomains);
  // #endif
  //         qs->push(id, ray);
  //       }
  //     }
  //   }

  void intersect(const SceneT* scene, RayBuf<Ray> ray_buf,
                 spray::QVector<Ray*>* qs) {
    Ray* rays = ray_buf.rays;
    for (std::size_t i = 0; i < ray_buf.num; ++i) {
      isectAll(scene, &rays[i], qs);
    }
  }

// #ifdef SPRAY_GLOG_CHECK
//     CHECK_GT(domains_.size(), 0);
// #endif
//     Ray* rays = ray_buf.rays;
// 
//     for (std::size_t i = 0; i < ray_buf.num; ++i) {
//       Ray* ray = &rays[i];
// 
//       RTCRayUtil::makeRayForDomainIntersection(ray->org, ray->dir, &domains_,
//                                                &eray_);
// 
//       scene->intersectDomains(eray_);
// 
//       if (domains_.count) {
//         RTCRayUtil::sortDomains(domains_, hits_);
// 
//         for (int d = 0; d < domains_.count; ++d) {
//           int id = hits_[d].id;
// #ifdef SPRAY_GLOG_CHECK
//           CHECK_LT(id, ndomains);
// #endif
//           qs->push(id, ray);
//         }
//       }
//     }
//   }

  void intersect(int exclude_id, const SceneT* scene, Ray* ray,
                 spray::QVector<Ray*>* qs) {
    isectWithoutCurrentDomain(exclude_id, scene, ray, qs);
  }
  // #ifdef SPRAY_GLOG_CHECK
  //     CHECK_GT(domains_.size(), 0);
  // #endif
  //     RTCRayUtil::makeRayForDomainIntersection(ray->org, ray->dir, &domains_,
  //                                              &eray_);
  //
  //     scene->intersectDomains(eray_);
  //
  //     if (domains_.count) {
  //       RTCRayUtil::sortDomains(domains_, hits_);
  //
  //       for (int d = 0; d < domains_.count; ++d) {
  //         int id = hits_[d].id;
  // #ifdef SPRAY_GLOG_CHECK
  //         CHECK_LT(id, ndomains);
  // #endif
  //         if (id != exclude_id) {
  //           qs->push(id, ray);
  //         }
  //       }
  //     }
  //   }

  void intersect(int exclude_id, float t, const SceneT* scene, Ray* ray,
                 spray::QVector<Ray*>* qs) {
    isectWithoutFarDomain(exclude_id, t, scene, ray, qs);
  }
  // #ifdef SPRAY_GLOG_CHECK
  //     CHECK_GT(domains_.size(), 0);
  // #endif
  //     RTCRayUtil::makeRayForDomainIntersection(ray->org, ray->dir, &domains_,
  //                                              &eray_);
  //
  //     scene->intersectDomains(eray_);
  //
  //     if (domains_.count) {
  //       RTCRayUtil::sortDomains(domains_, hits_);
  //
  //       for (int d = 0; d < domains_.count; ++d) {
  //         int id = hits_[d].id;
  // #ifdef SPRAY_GLOG_CHECK
  //         CHECK_LT(id, ndomains);
  // #endif
  //         if (id != exclude_id && hits_[d].t < t) {
  //           qs->push(id, ray);
  //         }
  //       }
  //     }
  //   }

 private:
  void isectDomains(const SceneT* scene, const Ray* ray) {
#ifdef SPRAY_GLOG_CHECK
    CHECK_GT(domains_.size(), 0);
#endif
    domains_.reset();
    eray_.reset(ray->org, ray->dir, &domains_);
    scene->intersectDomains(eray_);
    domains_.sort();
  }

  // used for parallel ray queuing
  void isectAll(const SceneT* scene, Ray* ray, spray::QVector<Ray*>* qs) {
#ifdef SPRAY_GLOG_CHECK
    CHECK_GT(domains_.size(), 0);
#endif
    isectDomains(scene, ray);

    for (std::size_t i = 0; i < domains_.getNumHits(); ++i) {
#ifdef SPRAY_GLOG_CHECK
      CHECK_LT(domains_.getId(i), domains_.size());
#endif
      qs->push(domains_.getId(i), ray);
    }
  }

  void isectWithoutCurrentDomain(int exclude_id, const SceneT* scene, Ray* ray,
                                 spray::QVector<Ray*>* qs) {
#ifdef SPRAY_GLOG_CHECK
    CHECK_GT(domains_.size(), 0);
#endif
    isectDomains(scene, ray);

    for (std::size_t i = 0; i < domains_.getNumHits(); ++i) {
#ifdef SPRAY_GLOG_CHECK
      CHECK_LT(domains_.getId(i), domains_.size());
#endif
      int id = domains_.getId(i);
      if (id != exclude_id) {
        qs->push(id, ray);
      }
    }
  }

  void isectWithoutFarDomain(int exclude_id, float t, const SceneT* scene,
                             Ray* ray, spray::QVector<Ray*>* qs) {
#ifdef SPRAY_GLOG_CHECK
    CHECK_GT(domains_.size(), 0);
#endif
    isectDomains(scene, ray);

    for (std::size_t i = 0; i < domains_.getNumHits(); ++i) {
#ifdef SPRAY_GLOG_CHECK
      CHECK_LT(domains_.getId(i), domains_.size());
#endif
      int id = domains_.getId(i);
      if (id != exclude_id && domains_.getTnear(i) < t) {
        qs->push(id, ray);
      }
    }
  }

  //     RTCRayUtil::makeRayForDomainIntersection(ray->org, ray->dir, &domains_,
  //                                              &eray_);
  //
  //     scene->intersectDomains(eray_);
  //
  //     if (domains_.count) {
  //       RTCRayUtil::sortDomains(domains_, hits_);
  //
  //       for (int d = 0; d < domains_.count; ++d) {
  //         int id = hits_[d].id;
  // #ifdef SPRAY_GLOG_CHECK
  //         CHECK_LT(id, ndomains);
  // #endif
  //         if (id != exclude_id) {
  //           qs->push(id, ray);
  //         }
  //       }
  //     }
  //   }

 private:
  DomainList domains_;
  RTCRayExt eray_;
};

}  // namespace insitu
}  // namespace spray
