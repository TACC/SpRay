// ========================================================================== //
// Copyright (c) 2017-2018 The University of Texas at Austin.                 //
// All rights reserved.                                                       //
//                                                                            //
// Licensed under the Apache License, Version 2.0 (the "License");            //
// you may not use this file except in compliance with the License.           //
// A copy of the License is included with this software in the file LICENSE.  //
// If your copy does not contain the License, you may obtain a copy of the    //
// License at:                                                                //
//                                                                            //
//     https://www.apache.org/licenses/LICENSE-2.0                            //
//                                                                            //
// Unless required by applicable law or agreed to in writing, software        //
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  //
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.           //
// See the License for the specific language governing permissions and        //
// limitations under the License.                                             //
//                                                                            //
// ========================================================================== //

#pragma once

#include <cstdint>
#include <vector>

#include "glog/logging.h"

#include "cmake_config.h"  // auto generated by cmake

namespace spray {

class InsituPartition;

namespace ooc {

class DomainStats {
 public:
  void resize(int num_domains, bool stats_only);

 public:
  void reset() {
    for (auto& s : stats_) s = (int64_t)0;
  }
  void addStats(int id, const DomainStats& stats);

 private:
  struct Score {
    int domain_id;
    int64_t score;
  };
  /**
   * Ray statistics for the domains mapped to this process.
   * <domain0 stats: d0, d1, ..> <domain1 stats, d0, d1, .. > ..
   */
  std::vector<int64_t> stats_;
  /**
   * Traversal scores for the domains mapped to this process.
   */
  std::vector<Score> scores_;
  /**
   * Schedule of the domains mapped to this process.
   */
  std::vector<int> schedule_;  // ordered domain IDs
  int num_domains_;

 public:
  void schedule();
  void increment(int id, int depth) {
    int64_t& s = stats_[statsIndex(id, depth)];
    CHECK_GE(s, 0);
    ++s;
  }
  void decrement(int id, int depth) {
    int64_t& s = stats_[statsIndex(id, depth)];
    CHECK_GT(s, 0);
    --s;
  }

  int getDomainId(int order) const {
#ifdef SPRAY_GLOG_CHECK
    CHECK_LT(order, schedule_.size());
#endif
    return schedule_[order];
  }

 private:
  void evalScores();
  int64_t getStats(int id, int depth) const;
  int statsIndex(int id, int depth) const {
    return id * SPRAY_RAY_DOMAIN_LIST_SIZE + depth;
  }
  void sortScoresInDescendingOrder();
  void updateTraversalOrder();
};

class SingleDomainStats {
 public:
  void resize() { stats_.resize(SPRAY_RAY_DOMAIN_LIST_SIZE); }

  void reset() {
    for (auto& s : stats_) s = (int64_t)0;
  }

  void increment(int depth) { ++stats_[depth]; }

  int64_t getScore() {
    int64_t score = 0;
    for (int depth = 0; depth < SPRAY_RAY_DOMAIN_LIST_SIZE; ++depth) {
      int w = SPRAY_RAY_DOMAIN_LIST_SIZE - depth;
      score += (stats_[depth] * w);
    }
    return score;
  }

 private:
  std::vector<int64_t> stats_;
};

}  // namespace ooc
}  // namespace spray

